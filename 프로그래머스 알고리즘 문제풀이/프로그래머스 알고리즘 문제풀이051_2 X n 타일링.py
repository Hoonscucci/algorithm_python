2 x n 타일링
문제 설명
가로 길이가 2이고 세로의 길이가 1인 직사각형모양의 타일이 있습니다. 이 직사각형 타일을 이용하여 세로의 길이가 2이고 가로의 길이가 n인 바닥을 가득 채우려고 합니다. 타일을 채울 때는 다음과 같이 2가지 방법이 있습니다.

타일을 가로로 배치 하는 경우
타일을 세로로 배치 하는 경우
예를들어서 n이 7인 직사각형은 다음과 같이 채울 수 있습니다.

Imgur

직사각형의 가로의 길이 n이 매개변수로 주어질 때, 이 직사각형을 채우는 방법의 수를 return 하는 solution 함수를 완성해주세요.

제한사항
가로의 길이 n은 60,000이하의 자연수 입니다.
경우의 수가 많아 질 수 있으므로, 경우의 수를 1,000,000,007으로 나눈 나머지를 return해주세요.
입출력 예
n	result
4	5

================================================

# ???? 너를 내가 어떻게 풀어야 할까?
# n1 = | 1
# n2 = ||= 2
# n3 = ||| |= =| 3
# n4 = |||| ||= |=| =|| == 5
# n5 = ||||| |||= ||=| |=|| =||| |== =|= ==| 8 
# tile(n) = tile(n-1)+tile(n-2)
def solution(n):
    tile = [1,2]
    for i in range(3,n+1):
        tile.append(tile[i-1]+tile[i-2])
    return tile[-1]%1000000007
# IndexError: list index out of range

def solution(n):
    tile = [0 for i in range(n)]
    tile[0], tile[1] = 1, 2
    for i in range(2,n):
        tile[i] = tile[i-1]+tile[i-2]
        
    return tile[-1]%1000000007
# 효율성  테스트
# 테스트 1 〉	통과 (21.02ms, 27.7MB)
# 테스트 2 〉	실패 (시간 초과)
# 테스트 3 〉	통과 (22.18ms, 28.8MB)
# 테스트 4 〉	통과 (14.69ms, 21.8MB)
# 테스트 5 〉	실패 (시간 초과)
# 테스트 6 〉	실패 (시간 초과)

def solution(n):
    tile = [0 for i in range(n)]
    tile[0], tile[1] = 1, 2
    for i in range(2,n):
        tile[i] = (tile[i-1]+tile[i-2])%1000000007
        
    return tile[-1]

"""
동적 계획법이라는 힌트를 듣고 패턴을  찾게 되었다.
이전에 풀었던 피보나치 수와 같은 패턴을 가졌다.
그래서 피보나치 수 코드를 가져와서 입력 해봤으나 
index error가 나왔다 왜 인지는 모르겄다...ㅎ
그래서 찾아봤고
title을 n의 길이에 맞게 0의 배열로 만들어 놓고
0번 1번 인덱스 즉 n1,n2에 1,2,를 넣어준다.
그후 2번인덱스 ~ n-1번 인덱스까지 반복문을 돌면서 i-1 + i-2로 tile의 i번째 인덱스에 숫자를 맵핑해준다.
그후 tile의 마지막 인덱스에 1000000007로 나눈 나머지를 return 해줬는데
효율성 테스트에서 빠꾸를 먹었다.

그래서 tile[i]가 정의 될때마다 나눠줬는데 이건 시간초과가 안나왔다
왜지??? 모르겠다!"""