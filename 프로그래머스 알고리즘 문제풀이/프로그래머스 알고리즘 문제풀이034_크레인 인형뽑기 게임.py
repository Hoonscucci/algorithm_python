크레인 인형뽑기 게임
문제 설명
게임개발자인 "죠르디"는 크레인 인형뽑기 기계를 모바일 게임으로 만들려고 합니다.
"죠르디"는 게임의 재미를 높이기 위해 화면 구성과 규칙을 다음과 같이 게임 로직에 반영하려고 합니다.

crane_game_101.png

게임 화면은 "1 x 1" 크기의 칸들로 이루어진 "N x N" 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다. (위 그림은 "5 x 5" 크기의 예시입니다). 각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다. 모든 인형은 "1 x 1" 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다. 다음 그림은 [1번, 5번, 3번] 위치에서 순서대로 인형을 집어 올려 바구니에 담은 모습입니다.

crane_game_102.png

만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 위 상태에서 이어서 [5번] 위치에서 인형을 집어 바구니에 쌓으면 같은 모양 인형 두 개가 없어집니다.

crane_game_103.gif

크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. 또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. (그림에서는 화면표시 제약으로 5칸만으로 표현하였음)

게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.

[제한사항]
board 배열은 2차원 배열로 크기는 "5 x 5" 이상 "30 x 30" 이하입니다.
board의 각 칸에는 0 이상 100 이하인 정수가 담겨있습니다.
0은 빈 칸을 나타냅니다.
1 ~ 100의 각 숫자는 각기 다른 인형의 모양을 의미하며 같은 숫자는 같은 모양의 인형을 나타냅니다.
moves 배열의 크기는 1 이상 1,000 이하입니다.
moves 배열 각 원소들의 값은 1 이상이며 board 배열의 가로 크기 이하인 자연수입니다.
입출력 예
board	moves	result
[[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]]	[1,5,3,5,1,2,1,4]	4

=============================================================

from collections import deque
def solution(board, moves):
# moves의 앞부터 순서대로 사용
# 2차원 배열의 요소중 뽑아야하는 요소가 0이 아닐때 인형을 뽑는다
#   i. 뽑은 인형을 따로 정의하고
#   ii.뽑은 요소가 있던 자리를 0으로 바꾼다
#   iii.바구니에 추가했을때 연속으로 같은 인형이 오면 터치고 count +2를 해준다.
# moves를 모두 작동 시킨 후 사라진 인형의 갯수 리턴

# 문제를 풀때 먼저 작성해 보는 연습을 하면 좋을 것 같다.
# 머리속에만 있을때랑은 전혀 다르다 앞으로 미리 써 놓는 연습을 하면 좋을것 같다.

    count = 0                            # 터진 인형의 갯수를 파악하기위한 count
    bucket = []                          # 옮겨진 인형들이 모이는 장소 bucket
    moves = deque(moves)                 # moves의 앞부터 사용해야 하기 때문에 deque를 사용했다
    while moves:                         # moves가 있는동안 
        move = moves.popleft()           # move = moves.popleft() moves의 첫번째 요소부터 꺼내서 사용한다. ex) moves = [1,2,3] : move = 1 moves = [2,3]
        for i in range(len(board)):      # i에 board의 길이만큼 반복문 실행 
            if board[i][move-1] != 0:    # board[i][move-1]이 0이 아닐때 즉 인형을 뽑을 수 있을때
                doll = board[i][move-1]  # doll = board[i][move-1] doll에 미리 대입 시켜 놓고
                board[i][move-1] = 0     # board[i][move-1] 는 인형이 뽑혔기 때문에 0으로 바꿔 놓는다.
                if not bucket:           # 만약 bucket이 비어있다면 doll이 들어가도 터질일이 없으니 bucket에
                    bucket.append(doll)  # bucket에 doll을 추가해주고
                elif bucket[-1] == doll: # 비어있지 않다면 bucket의 마지막 요소가 doll과 같으면 
                    bucket.pop()         # bucket의 마지막요소를 제거하고
                    count+=2             # count에 2를 더해준다.
                else:                    # 둘 다 해당하지 않으면
                    bucket.append(doll)  # bucket에 doll을 추가한다.
                break                    # 그리고나서 이 문장이 수행 되었다면 break문을 걸어준다 걸지 않으면 그 뽑은 인형 밑에것도 뽑아오기 때문에
    return count

"""
예전에 한번 풀어 봤었는데 다시보니 하나도 기억이 나지 않았다.
그래서 예전에 풀었던거 보면서 이해하려 했는데
스터디장이 보지말고 풀어보라고해서 다시 문제를 정리하며 풀기 시작했다.
"""