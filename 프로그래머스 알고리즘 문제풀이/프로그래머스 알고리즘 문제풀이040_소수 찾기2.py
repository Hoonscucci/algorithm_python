소수 찾기
문제 설명
한자리 숫자가 적힌 종이 조각이 흩어져있습니다. 흩어진 종이 조각을 붙여 소수를 몇 개 만들 수 있는지 알아내려 합니다.

각 종이 조각에 적힌 숫자가 적힌 문자열 numbers가 주어졌을 때, 종이 조각으로 만들 수 있는 소수가 몇 개인지 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers는 길이 1 이상 7 이하인 문자열입니다.
numbers는 0~9까지 숫자만으로 이루어져 있습니다.
"013"은 0, 1, 3 숫자가 적힌 종이 조각이 흩어져있다는 의미입니다.
입출력 예
numbers	return
"17"	3
"011"	2
입출력 예 설명
예제 #1
[1, 7]으로는 소수 [7, 17, 71]를 만들 수 있습니다.

예제 #2
[0, 1, 1]으로는 소수 [11, 101]를 만들 수 있습니다.

11과 011은 같은 숫자로 취급합니다.

=============================================

# 종이에 숫자가 써져있다.
# 숫자를 조합하여 만들 수 있는 숫자중 소수 인것을 찾으라
# 이전에 소수찾기 방법을 숫자 조합마다 사용하여 만들 수 있지 않을까?
"""
라는 생각으로 문제에 접근 했지만 숫자들끼리의 조합을 수가 크지않을땐 조합 할수 있지만
숫자가 커지면 어떻게 만들어야 할지? 도대체 모르겠어서 찾아보게 되었다.
기본적으로 이 문제를 해결하기 위해서는 2가지를 알고 있어야 했다.
첫번째 소수 구하는 방법, 두번째 순열 라이브러리 
이 두가지를 알아야 했는데 나는 소수 구하는법은 알았지만 
순열 라이브러리를 몰랐다. 또한 소수 구하는 방법도 
저번 문제풀이 당시 에라토네스의 체 를 온전히 이해하지 못해서
다른 방법으로 구현했었는데 이제는 확실히 짚고 넘어가야겠다."""


# n이 소수 인지 확인하는 방법은 2~ n의 제곱근으로 n을 나눴을때 나누어 떨어지지 않으면 소수 이다. 
from itertools import permutations

def sosu(n):        # 소수를 구하는 함수를 만든다
    if n < 2:       # n이 2보다 작으면 
        return False# 소수가 아니기에 false를 반환하고
    for i in range(2, int(n**0.5)+1): # 1은 소수가 될수 없으니 2~ n의 제곱근까지 반복문 수행
        if n % i == 0: # if n이 i로 나누어 떨어지면
            return False # 소수가 아니고
    return True        # 나머지는 소수다

def solution(numbers):   
    answer = []          # answer을 빈 리스트로 만들어 준다
    nums = list(numbers) # numbers를 리스트 형태로 바꿔 준다
    temp = []            # permutation 함수를 수행해서 나온 수들을 담아줄 리스트
    for i in range(1, len(numbers)+1): # 1~ numbers의 길이만큼
        temp += list(permutations(nums, i)) #빈 리스트에 nums의 i개의 숫자를 조합해서 만든 순열을 담아준다
#ex ) nums[1,2,3] = permutaion(nums, i(1~3)) 1일때 [("1"),("2"),("3")] 2일떄 [("1","2"),("1","3"),("2","1"),("2","3"),("3","1"),("3","2")]    
    per = [int(''.join(t)) for t in temp] 
    # temp에 위의 예 같이 들어 있으니 ""를 제거하고 join시켜서 수의 조합을 만들고 int형식으로 바꿔준다.
    for p in per: #반복문 수행
        if sosu(p): #p가 sosu 함수에 들어가서 True이면
            answer.append(p) #answer에 p를 append 해준다
    return len(set(answer))
# 마지막에 set 함수를 사용한것은 011로 순열을 만들면 11,11,11,11,101,101이 나오기 때문이다.
# 그래서 set 함수를 사용하여 반복되는 숫자들을 제거하고 그 길이를 정답으로 추출하는것이다.

"""
문제의 난이도가 많이 올라간것같다...
그래도 이전에 제대로 학습하지 못했던 에라스토테네스의 체 코드와
순열 함수에 대해 알게 되었다.
"""