소수 찾기
문제 설명
1부터 입력받은 숫자 n 사이에 있는 소수의 개수를 반환하는 함수, solution을 만들어 보세요.

소수는 1과 자기 자신으로만 나누어지는 수를 의미합니다.
(1은 소수가 아닙니다.)

제한 조건
n은 2이상 1000000이하의 자연수입니다.
입출력 예
n	result
10	4
5	3

==============================================

def solution(n):
    num = set(range(2,n+1))  #집합연산을 하기위해 set함수로 집합으로 바꿔줌
    
    for i in range(2,n+1): #i에 2~n까지의 숫자를 대입하면서 반복문을 수행
        if i in num:       # 만약 i가 num에 있다면 
            num-=set(range(2*i,n+1,i)) # num에서 set(~)를 빼라
    return len(num)  

"""
여러 방법으로 시도해봤지만 문제를 풀 수 없었음
그래서 답을 찾아 보았으나 에라토스테네스 체의 개념은 이해했으나
코드를 이해 못하겠어서 더 찾아보았다.
그중 집합 연산을 활용하여 문제를 해결한 코드를 가져와봤다.
먼저 num이라는 집합에 2부터 n+1까지 숫자를 넣어준다
그후 반복문으로 i에 2~n까지 숫자를 대입하면서
만약 i가 num에 있다면
num에서 2*i~n+1까지 i씩 증가하는 숫자를 빼 주었다.
(n이 5라면 2,3,4,5가 들어있는 num이 있을거고 i에 2,3,4,5를 넣으면서 반복문 수행
i=2는 num에 있으니 range(2*2,6,2) 4~5까지 2씩 올라가는 수를 빼준다 여기서는 4가 있으니 
num에서 4를 빼면 num = 2,3,5가 남고 i - 3과 5는 *2 를 하면 5를 넘어가기에 집합연산이 진행되지않고
i -4는 num에서 4가 i=2 일때 제거했으니 넘어가고 2,3,5만 남는다.)

이 문제는 며칠 지나고 다시 풀어도 못 풀것같다...ㅎ
"""

==============================================
